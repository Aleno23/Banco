//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Presentacion.ServiceReferenceBanco {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceBanco.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Ingresar", ReplyAction="http://tempuri.org/IService1/IngresarResponse")]
        string[] Ingresar(string usuario, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Ingresar", ReplyAction="http://tempuri.org/IService1/IngresarResponse")]
        System.Threading.Tasks.Task<string[]> IngresarAsync(string usuario, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegistrarEmpleado", ReplyAction="http://tempuri.org/IService1/RegistrarEmpleadoResponse")]
        void RegistrarEmpleado(string cedula, string nombre, string apellido, string telefono, string direccion, string celular, string cargo, string usuario, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegistrarEmpleado", ReplyAction="http://tempuri.org/IService1/RegistrarEmpleadoResponse")]
        System.Threading.Tasks.Task RegistrarEmpleadoAsync(string cedula, string nombre, string apellido, string telefono, string direccion, string celular, string cargo, string usuario, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BuscarEmpleado", ReplyAction="http://tempuri.org/IService1/BuscarEmpleadoResponse")]
        string[] BuscarEmpleado(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BuscarEmpleado", ReplyAction="http://tempuri.org/IService1/BuscarEmpleadoResponse")]
        System.Threading.Tasks.Task<string[]> BuscarEmpleadoAsync(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarEmpleado", ReplyAction="http://tempuri.org/IService1/ActualizarEmpleadoResponse")]
        void ActualizarEmpleado(string cedula, string nombre, string apellido, string telefono, string direccion, string celular, string cargo, string usuario, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarEmpleado", ReplyAction="http://tempuri.org/IService1/ActualizarEmpleadoResponse")]
        System.Threading.Tasks.Task ActualizarEmpleadoAsync(string cedula, string nombre, string apellido, string telefono, string direccion, string celular, string cargo, string usuario, string contraseña);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BorrarEmpleado", ReplyAction="http://tempuri.org/IService1/BorrarEmpleadoResponse")]
        void BorrarEmpleado(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BorrarEmpleado", ReplyAction="http://tempuri.org/IService1/BorrarEmpleadoResponse")]
        System.Threading.Tasks.Task BorrarEmpleadoAsync(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegistrarCliente", ReplyAction="http://tempuri.org/IService1/RegistrarClienteResponse")]
        void RegistrarCliente(string cedula, string nombre, string apellido, string telefono, string direccion, string celular);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegistrarCliente", ReplyAction="http://tempuri.org/IService1/RegistrarClienteResponse")]
        System.Threading.Tasks.Task RegistrarClienteAsync(string cedula, string nombre, string apellido, string telefono, string direccion, string celular);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BuscarCliente", ReplyAction="http://tempuri.org/IService1/BuscarClienteResponse")]
        string[] BuscarCliente(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BuscarCliente", ReplyAction="http://tempuri.org/IService1/BuscarClienteResponse")]
        System.Threading.Tasks.Task<string[]> BuscarClienteAsync(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarCliente", ReplyAction="http://tempuri.org/IService1/ActualizarClienteResponse")]
        void ActualizarCliente(string cedula, string nombre, string apellido, string telefono, string direccion, string celular);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarCliente", ReplyAction="http://tempuri.org/IService1/ActualizarClienteResponse")]
        System.Threading.Tasks.Task ActualizarClienteAsync(string cedula, string nombre, string apellido, string telefono, string direccion, string celular);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BorrarCliente", ReplyAction="http://tempuri.org/IService1/BorrarClienteResponse")]
        void BorrarCliente(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BorrarCliente", ReplyAction="http://tempuri.org/IService1/BorrarClienteResponse")]
        System.Threading.Tasks.Task BorrarClienteAsync(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegistrarCuenta", ReplyAction="http://tempuri.org/IService1/RegistrarCuentaResponse")]
        void RegistrarCuenta(string numero, string cedula, string nombre, string tipo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegistrarCuenta", ReplyAction="http://tempuri.org/IService1/RegistrarCuentaResponse")]
        System.Threading.Tasks.Task RegistrarCuentaAsync(string numero, string cedula, string nombre, string tipo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BuscarCuenta", ReplyAction="http://tempuri.org/IService1/BuscarCuentaResponse")]
        string[] BuscarCuenta(string numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BuscarCuenta", ReplyAction="http://tempuri.org/IService1/BuscarCuentaResponse")]
        System.Threading.Tasks.Task<string[]> BuscarCuentaAsync(string numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarCuenta", ReplyAction="http://tempuri.org/IService1/ActualizarCuentaResponse")]
        void ActualizarCuenta(string numero, string cedula, string nombre, string tipo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActualizarCuenta", ReplyAction="http://tempuri.org/IService1/ActualizarCuentaResponse")]
        System.Threading.Tasks.Task ActualizarCuentaAsync(string numero, string cedula, string nombre, string tipo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BorrarCuenta", ReplyAction="http://tempuri.org/IService1/BorrarCuentaResponse")]
        void BorrarCuenta(string numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BorrarCuenta", ReplyAction="http://tempuri.org/IService1/BorrarCuentaResponse")]
        System.Threading.Tasks.Task BorrarCuentaAsync(string numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Depositar", ReplyAction="http://tempuri.org/IService1/DepositarResponse")]
        void Depositar(string numero, string cedula, int cantidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Depositar", ReplyAction="http://tempuri.org/IService1/DepositarResponse")]
        System.Threading.Tasks.Task DepositarAsync(string numero, string cedula, int cantidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Retirar", ReplyAction="http://tempuri.org/IService1/RetirarResponse")]
        void Retirar(string numero, string cedula, int cantidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Retirar", ReplyAction="http://tempuri.org/IService1/RetirarResponse")]
        System.Threading.Tasks.Task RetirarAsync(string numero, string cedula, int cantidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerSaldo", ReplyAction="http://tempuri.org/IService1/VerSaldoResponse")]
        int VerSaldo(string numero, string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerSaldo", ReplyAction="http://tempuri.org/IService1/VerSaldoResponse")]
        System.Threading.Tasks.Task<int> VerSaldoAsync(string numero, string cedula);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Presentacion.ServiceReferenceBanco.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Presentacion.ServiceReferenceBanco.IService1>, Presentacion.ServiceReferenceBanco.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] Ingresar(string usuario, string contraseña) {
            return base.Channel.Ingresar(usuario, contraseña);
        }
        
        public System.Threading.Tasks.Task<string[]> IngresarAsync(string usuario, string contraseña) {
            return base.Channel.IngresarAsync(usuario, contraseña);
        }
        
        public void RegistrarEmpleado(string cedula, string nombre, string apellido, string telefono, string direccion, string celular, string cargo, string usuario, string contraseña) {
            base.Channel.RegistrarEmpleado(cedula, nombre, apellido, telefono, direccion, celular, cargo, usuario, contraseña);
        }
        
        public System.Threading.Tasks.Task RegistrarEmpleadoAsync(string cedula, string nombre, string apellido, string telefono, string direccion, string celular, string cargo, string usuario, string contraseña) {
            return base.Channel.RegistrarEmpleadoAsync(cedula, nombre, apellido, telefono, direccion, celular, cargo, usuario, contraseña);
        }
        
        public string[] BuscarEmpleado(string cedula) {
            return base.Channel.BuscarEmpleado(cedula);
        }
        
        public System.Threading.Tasks.Task<string[]> BuscarEmpleadoAsync(string cedula) {
            return base.Channel.BuscarEmpleadoAsync(cedula);
        }
        
        public void ActualizarEmpleado(string cedula, string nombre, string apellido, string telefono, string direccion, string celular, string cargo, string usuario, string contraseña) {
            base.Channel.ActualizarEmpleado(cedula, nombre, apellido, telefono, direccion, celular, cargo, usuario, contraseña);
        }
        
        public System.Threading.Tasks.Task ActualizarEmpleadoAsync(string cedula, string nombre, string apellido, string telefono, string direccion, string celular, string cargo, string usuario, string contraseña) {
            return base.Channel.ActualizarEmpleadoAsync(cedula, nombre, apellido, telefono, direccion, celular, cargo, usuario, contraseña);
        }
        
        public void BorrarEmpleado(string cedula) {
            base.Channel.BorrarEmpleado(cedula);
        }
        
        public System.Threading.Tasks.Task BorrarEmpleadoAsync(string cedula) {
            return base.Channel.BorrarEmpleadoAsync(cedula);
        }
        
        public void RegistrarCliente(string cedula, string nombre, string apellido, string telefono, string direccion, string celular) {
            base.Channel.RegistrarCliente(cedula, nombre, apellido, telefono, direccion, celular);
        }
        
        public System.Threading.Tasks.Task RegistrarClienteAsync(string cedula, string nombre, string apellido, string telefono, string direccion, string celular) {
            return base.Channel.RegistrarClienteAsync(cedula, nombre, apellido, telefono, direccion, celular);
        }
        
        public string[] BuscarCliente(string cedula) {
            return base.Channel.BuscarCliente(cedula);
        }
        
        public System.Threading.Tasks.Task<string[]> BuscarClienteAsync(string cedula) {
            return base.Channel.BuscarClienteAsync(cedula);
        }
        
        public void ActualizarCliente(string cedula, string nombre, string apellido, string telefono, string direccion, string celular) {
            base.Channel.ActualizarCliente(cedula, nombre, apellido, telefono, direccion, celular);
        }
        
        public System.Threading.Tasks.Task ActualizarClienteAsync(string cedula, string nombre, string apellido, string telefono, string direccion, string celular) {
            return base.Channel.ActualizarClienteAsync(cedula, nombre, apellido, telefono, direccion, celular);
        }
        
        public void BorrarCliente(string cedula) {
            base.Channel.BorrarCliente(cedula);
        }
        
        public System.Threading.Tasks.Task BorrarClienteAsync(string cedula) {
            return base.Channel.BorrarClienteAsync(cedula);
        }
        
        public void RegistrarCuenta(string numero, string cedula, string nombre, string tipo) {
            base.Channel.RegistrarCuenta(numero, cedula, nombre, tipo);
        }
        
        public System.Threading.Tasks.Task RegistrarCuentaAsync(string numero, string cedula, string nombre, string tipo) {
            return base.Channel.RegistrarCuentaAsync(numero, cedula, nombre, tipo);
        }
        
        public string[] BuscarCuenta(string numero) {
            return base.Channel.BuscarCuenta(numero);
        }
        
        public System.Threading.Tasks.Task<string[]> BuscarCuentaAsync(string numero) {
            return base.Channel.BuscarCuentaAsync(numero);
        }
        
        public void ActualizarCuenta(string numero, string cedula, string nombre, string tipo) {
            base.Channel.ActualizarCuenta(numero, cedula, nombre, tipo);
        }
        
        public System.Threading.Tasks.Task ActualizarCuentaAsync(string numero, string cedula, string nombre, string tipo) {
            return base.Channel.ActualizarCuentaAsync(numero, cedula, nombre, tipo);
        }
        
        public void BorrarCuenta(string numero) {
            base.Channel.BorrarCuenta(numero);
        }
        
        public System.Threading.Tasks.Task BorrarCuentaAsync(string numero) {
            return base.Channel.BorrarCuentaAsync(numero);
        }
        
        public void Depositar(string numero, string cedula, int cantidad) {
            base.Channel.Depositar(numero, cedula, cantidad);
        }
        
        public System.Threading.Tasks.Task DepositarAsync(string numero, string cedula, int cantidad) {
            return base.Channel.DepositarAsync(numero, cedula, cantidad);
        }
        
        public void Retirar(string numero, string cedula, int cantidad) {
            base.Channel.Retirar(numero, cedula, cantidad);
        }
        
        public System.Threading.Tasks.Task RetirarAsync(string numero, string cedula, int cantidad) {
            return base.Channel.RetirarAsync(numero, cedula, cantidad);
        }
        
        public int VerSaldo(string numero, string cedula) {
            return base.Channel.VerSaldo(numero, cedula);
        }
        
        public System.Threading.Tasks.Task<int> VerSaldoAsync(string numero, string cedula) {
            return base.Channel.VerSaldoAsync(numero, cedula);
        }
    }
}
